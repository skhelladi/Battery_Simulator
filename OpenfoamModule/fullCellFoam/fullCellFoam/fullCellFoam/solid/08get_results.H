
if(solidRegions[i].name() =="anode")
{
  // 1. Extract fai_s at the anodeCC
  label ID_anode_CC = solidRegions[i].boundaryMesh().findPatchID("anodeCC");
  scalarField fai_s_anodeCC_patch = fai_s.boundaryFieldRef()[ID_anode_CC];
  fai_s_anodeCC = average(fai_s_anodeCC_patch);

  // 2. Extract the averaged properties
  scalarField        V_anode      = mesh.V();           // patch of mesh volume in the anode
  scalarField        A_anode_CC   = mesh.magSf().boundaryField()[ID_anode_CC]; // patch of mesh area at the anode_CC
                     Iapp_a_React = sum(J_current * V_anode) /  sum(A_anode_CC); //calculate the current density generated by anode reaction
                     theta_a      = sum(theta * V_anode) / sum(V_anode);
                     Cs_a         = sum(Cs * V_anode) / sum(V_anode);
                     C_se_a       = sum(C_se * V_anode) / sum(V_anode);
                     Ce_a         = sum(Ce * V_anode) / sum(V_anode);
                     U_rev_a      = sum(U_rev * V_anode) / sum(V_anode);
                     fai_s_a      = sum(fai_s * V_anode) / sum(V_anode);
                     fai_e_a      = sum(fai_e * V_anode) / sum(V_anode);
                     eta_a        = sum(eta * V_anode) / sum(V_anode);
}

if(solidRegions[i].name() =="cathode")
{
  //  1. Extract fai_s at the cathodeCC
  label ID_cathode_CC = solidRegions[i].boundaryMesh().findPatchID("cathodeCC");
  scalarField fai_s_cathodeCC_patch = fai_s.boundaryFieldRef()[ID_cathode_CC];
  fai_s_cathodeCC = average(fai_s_cathodeCC_patch);

  // 2. Extract the averaged properties
  scalarField        V_cathode    = mesh.V();           // patch of mesh volume in the cathode
  scalarField        A_cathode_CC = mesh.magSf().boundaryField()[ID_cathode_CC]; // patch of mesh area at the cathode_CC
                     Iapp_c_React = sum(J_current * V_cathode) /  sum(A_cathode_CC); //calculate the current density generated by cathode reaction
                     theta_c      = sum(theta * V_cathode) / sum(V_cathode);
                     Cs_c         = sum(Cs * V_cathode) / sum(V_cathode);
                     C_se_c       = sum(C_se * V_cathode) / sum(V_cathode);
                     Ce_c         = sum(Ce * V_cathode) / sum(V_cathode);
                     U_rev_c      = sum(U_rev * V_cathode) / sum(V_cathode);
                     fai_s_c      = sum(fai_s * V_cathode) / sum(V_cathode);
                     fai_e_c      = sum(fai_e * V_cathode) / sum(V_cathode);
                     eta_c        = sum(eta * V_cathode) / sum(V_cathode);

}

V = fai_s_cathodeCC - fai_s_anodeCC;
